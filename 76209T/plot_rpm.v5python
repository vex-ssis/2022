{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nflywheel_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)\nflywheel_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_6_1, True)\nflywheel = MotorGroup(flywheel_motor_a, flywheel_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_right_shoulder_control_motors_stopped = True\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # check the buttonR1/buttonR2 status\n            # to control flywheel\n            if controller_1.buttonR1.pressing():\n                flywheel.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                flywheel.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                flywheel.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\nmyVariable = 0\n\n\ndef print_stats():\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(\"WHITE Velocity: \", flywheel.velocity(PERCENT))\n    brain.screen.next_row()\n    brain.screen.print(\"GREEN Power (W): \", flywheel.power(PowerUnits.WATT))\n    brain.screen.next_row()\n    brain.screen.print(\"RED   Current (A): \", flywheel.current(CurrentUnits.AMP))\n    brain.screen.next_row()\n    brain.screen.print(\"BLUE  Temperature (%): \", flywheel.temperature(PERCENT))\n\ndef draw_stats(x):\n    brain.screen.set_pen_color(Color.BLACK)\n    brain.screen.draw_line(x+1, 100, x+1, 240)\n    brain.screen.set_pen_color(Color.RED)\n    brain.screen.draw_pixel(x, 200-(flywheel.current(CurrentUnits.AMP)*5))\n    brain.screen.set_pen_color(Color.BLUE)\n    brain.screen.draw_pixel(x, 200-(flywheel.temperature(PERCENT)*5))\n    brain.screen.set_pen_color(Color.GREEN)\n    brain.screen.draw_pixel(x, 215-(flywheel.power(PowerUnits.WATT)*5))\n    brain.screen.set_pen_color(Color.WHITE)\n    brain.screen.draw_pixel(x, 230-(flywheel.velocity(PERCENT)*2))\n\ndef main():\n    global myVariable\n    x = 0\n    flywheel.set_velocity(100, PERCENT)\n    wait(1, SECONDS)\n    while True:\n        print_stats()\n        draw_stats(x)\n        x += 1\n        if x > 480:\n            x = 0\n        wait(0.01, SECONDS)\n    pass\n\nmain()\n\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"flywheel","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[9,10],"name":"flywheel","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":5,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}